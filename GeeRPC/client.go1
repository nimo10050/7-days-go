//package main
//
//import (
//	"fmt"
//	"go-grpc/codec"
//	"net"
//	"sync"
//)
//
//type Call struct {
//	Seq           uint64
//	ServiceMethod string      // format "<service>.<method>"
//	Args          interface{} // arguments to the function
//	Reply         interface{} // reply from the function
//	Error         error       // if error occurs, it will be set
//	Done          chan *Call  // Strobes when call is complete.
//}
//
//func (call *Call) done() {
//	call.Done <- call
//}
//
//type Client struct {
//	cc codec.Codec
//	// opt      *Option
//	sending  sync.Mutex // protect following
//	header   codec.Header
//	mu       sync.Mutex // protect following
//	seq      uint64
//	pending  map[uint64]*Call
//	closing  bool // user has called Close
//	shutdown bool // server has told us to stop
//}
//
//func (c *Client) receive() {
//
//}
//
//func (c *Client) Call(user codec.User) {
//	c.cc.Write(nil, user)
//}
//
//func NewClient(conn net.Conn) (*Client, error) {
//	codecFunc := codec.NewCodecFuncMap[codec.JsonType]
//	if codecFunc == nil {
//		err := fmt.Errorf("invalid codec type %s", codec.JsonType)
//		return nil, err
//	}
//	return newClientCodec(codecFunc(conn)), nil
//}
//
//func newClientCodec(cc codec.Codec) *Client {
//	client := &Client{
//		seq:     1, // seq starts with 1, 0 means invalid call
//		cc:      cc,
//		pending: make(map[uint64]*Call),
//	}
//	go client.receive()
//	return client
//}
//
//func Dial(network, address string) (client *Client, err error) {
//	conn, err := net.Dial(network, address)
//	if err != nil {
//		return nil, err
//	}
//	// close the connection if client is nil
//	defer func() {
//		if client == nil {
//			_ = conn.Close()
//		}
//	}()
//	return NewClient(conn)
//}
